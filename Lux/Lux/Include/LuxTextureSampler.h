#ifndef LUX_TEXTURE_SAMPLER_H
#define LUX_TEXTURE_SAMPLER_H

namespace Lux
{
	namespace Core
	{
		enum TextureFilter
		{
			LUX_FILTER_MIN_MAG_MIP_POINT = 0,
			LUX_FILTER_MIN_MAG_POINT_MIP_LINEAR = 0x1,
			LUX_FILTER_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x4,
			LUX_FILTER_MIN_POINT_MAG_MIP_LINEAR = 0x5,
			LUX_FILTER_MIN_LINEAR_MAG_MIP_POINT = 0x10,
			LUX_FILTER_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x11,
			LUX_FILTER_MIN_MAG_LINEAR_MIP_POINT = 0x14,
			LUX_FILTER_MIN_MAG_MIP_LINEAR = 0x15,
			LUX_FILTER_ANISOTROPIC = 0x55,
			LUX_FILTER_COMPARISON_MIN_MAG_MIP_POINT = 0x80,
			LUX_FILTER_COMPARISON_MIN_MAG_POINT_MIP_LINEAR = 0x81,
			LUX_FILTER_COMPARISON_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x84,
			LUX_FILTER_COMPARISON_MIN_POINT_MAG_MIP_LINEAR = 0x85,
			LUX_FILTER_COMPARISON_MIN_LINEAR_MAG_MIP_POINT = 0x90,
			LUX_FILTER_COMPARISON_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x91,
			LUX_FILTER_COMPARISON_MIN_MAG_LINEAR_MIP_POINT = 0x94,
			LUX_FILTER_COMPARISON_MIN_MAG_MIP_LINEAR = 0x95,
			LUX_FILTER_COMPARISON_ANISOTROPIC = 0xd5,
			LUX_FILTER_MINIMUM_MIN_MAG_MIP_POINT = 0x100,
			LUX_FILTER_MINIMUM_MIN_MAG_POINT_MIP_LINEAR = 0x101,
			LUX_FILTER_MINIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x104,
			LUX_FILTER_MINIMUM_MIN_POINT_MAG_MIP_LINEAR = 0x105,
			LUX_FILTER_MINIMUM_MIN_LINEAR_MAG_MIP_POINT = 0x110,
			LUX_FILTER_MINIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x111,
			LUX_FILTER_MINIMUM_MIN_MAG_LINEAR_MIP_POINT = 0x114,
			LUX_FILTER_MINIMUM_MIN_MAG_MIP_LINEAR = 0x115,
			LUX_FILTER_MINIMUM_ANISOTROPIC = 0x155,
			LUX_FILTER_MAXIMUM_MIN_MAG_MIP_POINT = 0x180,
			LUX_FILTER_MAXIMUM_MIN_MAG_POINT_MIP_LINEAR = 0x181,
			LUX_FILTER_MAXIMUM_MIN_POINT_MAG_LINEAR_MIP_POINT = 0x184,
			LUX_FILTER_MAXIMUM_MIN_POINT_MAG_MIP_LINEAR = 0x185,
			LUX_FILTER_MAXIMUM_MIN_LINEAR_MAG_MIP_POINT = 0x190,
			LUX_FILTER_MAXIMUM_MIN_LINEAR_MAG_POINT_MIP_LINEAR = 0x191,
			LUX_FILTER_MAXIMUM_MIN_MAG_LINEAR_MIP_POINT = 0x194,
			LUX_FILTER_MAXIMUM_MIN_MAG_MIP_LINEAR = 0x195,
			LUX_FILTER_MAXIMUM_ANISOTROPIC = 0x1d5
		};

		enum TextureAddressMode
		{
			LUX_TEXTURE_ADDRESS_WRAP = 1,
			LUX_TEXTURE_ADDRESS_MIRROR = 2,
			LUX_TEXTURE_ADDRESS_CLAMP = 3,
			LUX_TEXTURE_ADDRESS_BORDER = 4,
			LUX_TEXTURE_ADDRESS_MIRROR_ONCE = 5
		};

		enum TextureComparisonFunc
		{
			LUX_COMPARISON_NEVER = 1,
			LUX_COMPARISON_LESS = 2,
			LUX_COMPARISON_EQUAL = 3,
			LUX_COMPARISON_LESS_EQUAL = 4,
			LUX_COMPARISON_GREATER = 5,
			LUX_COMPARISON_NOT_EQUAL = 6,
			LUX_COMPARISON_GREATER_EQUAL = 7,
			LUX_COMPARISON_ALWAYS = 8
		};

		struct TextureSamplerOptions
		{
			// Default values
			TextureSamplerOptions() :
			m_Filtering(LUX_FILTER_MIN_MAG_MIP_LINEAR),
			m_AddressingU(LUX_TEXTURE_ADDRESS_CLAMP),
			m_AddressingV(LUX_TEXTURE_ADDRESS_CLAMP),
			m_AddressingW(LUX_TEXTURE_ADDRESS_CLAMP),
			m_MipLODBias(0.0f),
			m_MaxLOD(FLT_MAX),
			m_MinLOD(-FLT_MAX),
			m_MaxAnisotropy(1),
			m_ComparisonFunc(LUX_COMPARISON_NEVER),
			m_BorderColor(1.0f)
			{
				
			}

			TextureFilter m_Filtering;
			TextureAddressMode m_AddressingU;
			TextureAddressMode m_AddressingV;
			TextureAddressMode m_AddressingW;
			float m_MipLODBias;
			unsigned int m_MaxAnisotropy;
			TextureComparisonFunc m_ComparisonFunc;
			vec4 m_BorderColor;
			float m_MinLOD;
			float m_MaxLOD;
		};

		class TextureSampler
		{
		public:
			TextureSampler();
			TextureSampler(TextureSamplerOptions& a_Options);
			virtual ~TextureSampler();

		protected:
			TextureSamplerOptions m_Options;
		};
	}
}

#endif